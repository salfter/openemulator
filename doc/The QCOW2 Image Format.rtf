{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf250
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green46\blue228;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid701\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid8}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}}
{\info
{\title The QCOW2 Image Format}}\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa320\qc

\f0\b\fs48 \cf0 The QCOW2 Image Format\
\pard\pardeftab720\sa240\ql\qnatural

\b0\fs24 \cf0 The QCOW image format is one of the disk image formats supported by the QEMU processor emulator. It is a representation of a fixed size block device in a file. Benefits it offers over using raw dump representation include:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls1\ilvl0\cf0 {\listtext	1.	}Smaller file size, even on filesystems which don't support 
\i holes
\i0  (i.e. sparse files)\
{\listtext	2.	}Copy-on-write support, where the image only represents changes made to an underlying disk image\
{\listtext	3.	}Snapshot support, where the image can contain multiple snapshots of the images history\
{\listtext	4.	}Optional zlib based compression\
{\listtext	5.	}Optional AES encryption\
\pard\pardeftab720\sa240\ql\qnatural
\cf0 The qemu-img command is the most common way of manipulating these images e.g.\
\pard\pardeftab720\ql\qnatural

\f1 \cf0   $> qemu-img create -f qcow2 test.qcow2 4G\
  Formating 'test.qcow2', fmt=qcow2, size=4194304 kB\
  $> qemu-img convert test.qcow2 -O raw test.img\
\pard\pardeftab720\sa240\ql\qnatural

\f0 \cf0 \
\pard\pardeftab720\sa280\ql\qnatural

\b\fs36 \cf0 The Header\
\pard\pardeftab720\sa240\ql\qnatural

\b0\fs24 \cf0 Each QCOW2 file begins with a header, in big endian format, as follows:\
\pard\pardeftab720\ql\qnatural

\f1 \cf0   typedef struct QCowHeader \{\
      uint32_t magic;\
      uint32_t version;\
\
      uint64_t backing_file_offset;\
      uint32_t backing_file_size;\
\
      uint32_t cluster_bits;\
      uint64_t size; /* in bytes */\
      uint32_t crypt_method;\
\
      uint32_t l1_size;\
      uint64_t l1_table_offset;\
\
      uint64_t refcount_table_offset;\
      uint32_t refcount_table_clusters;\
\
      uint32_t nb_snapshots;\
      uint64_t snapshots_offset;\
  \} QCowHeader;\
\pard\pardeftab720\sa240\ql\qnatural

\f0 \cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls2\ilvl0\cf0 {\listtext	\'95	}The first 4 bytes contain the characters 'Q', 'F', 'I' followed by 
\f1 0xfb
\f0 .\
{\listtext	\'95	}The next 4 bytes contain the format version used by the file. Currently, there has been two versions of the format, version 1 and version2. We are discussing the latter here, and the former is discussed at the end.\
{\listtext	\'95	}The 
\f1 backing_file_offset
\f0  field gives the offset from the beginning of the file to a string containing the path to a file; 
\f1 backing_file_size
\f0  gives the length of this string, which isn't a nul-terminated. If this image is a copy-on-write image, then this will be the path to the original file. More on that below.\
{\listtext	\'95	}The 
\f1 cluster_bits
\f0  fields them, describe how to map an image offset address to a location within the file; it determines the number of lower bits of the offset address are used as an index within a cluster. Since L2 tables occupy a single cluster and contain 8 byte entires, the next most significant 
\f1 cluster_bits
\f0 , less three bits, are used as an index into the L2 table. the L2 table. More on the format's 2-level lookup system below.\
{\listtext	\'95	}The next 8 bytes contain the size, in bytes, of the block device represented by the image.\
{\listtext	\'95	}The 
\f1 crypt_method
\f0  field is 0 if no encryption has been used, and 1 if AES encryption has been used.\
{\listtext	\'95	}The 
\f1 l1_size
\f0  field gives the number of 8 byte entries available in the L1 table and 
\f1 l1_table_offset
\f0  gives the offset within the file of the start of the table.\
{\listtext	\'95	}Similarily, 
\f1 refcount_table_offset
\f0  gives the offset to the start of the refcount table, but 
\f1 refcount_table_clusters
\f0  describes the size of the refcount table in units of clusters.\
{\listtext	\'95	}\
\ls2\ilvl0
\f1 {\listtext	\'95	}nb_snapshots
\f0  gives the number of snapshots contained in the image and 
\f1 snapshots_offset
\f0  gives the offset of the 
\f1 QCowSnapshotHeader
\f0  headers, one for each snapshot.\
\pard\pardeftab720\sa240\ql\qnatural
\cf0 Typically the image file will be laid out as follows:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls3\ilvl0\cf0 {\listtext	\'95	}The header, as described above.\
{\listtext	\'95	}Starting at the next cluster boundary, the L1 table.\
{\listtext	\'95	}The refcount table, again boundary aligned.\
{\listtext	\'95	}One or more refcount blocks.\
{\listtext	\'95	}Snapshot headers, the first boundary aligned and the following headers aligned on 8 byte boundaries.\
{\listtext	\'95	}L2 tables, each one occupying a single cluster.\
{\listtext	\'95	}Data clusters.\
\pard\pardeftab720\sa240\ql\qnatural
\cf0 \
\pard\pardeftab720\sa280\ql\qnatural

\b\fs36 \cf0 2-Level Lookups\
\pard\pardeftab720\sa240\ql\qnatural

\b0\fs24 \cf0 With QCOW, the contents of the device are stored in 
\i clusters
\i0 . Each cluster contains a number of 512 byte sectors.\
In order to find the cluster for a given address within the device, you must traverse two levels of tables. The L1 table is an array of file offsets to L2 tables, and each L2 table is an array of file offsets to clusters.\
So, an address is split into three separate offsets according to the 
\f1 cluster_bits
\f0  field. For example, if 
\f1 cluster_bits
\f0  is 12, then the address is split up as follows:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls4\ilvl0\cf0 {\listtext	\'95	}the lower 12 is an offset within a 4Kb cluster\
{\listtext	\'95	}the next 9 bits is an offset within a 512 entry array of 8 byte file offsets, the L2 table. The number of bits needed here is given by 
\f1 l2_bits = cluster_bits - 3
\f0  since the L2 table is a single cluster containing 8 byte entries\
{\listtext	\'95	}the remaining 43 bits is an offset within another array of 8 byte file offsets, the L1 table\
\pard\pardeftab720\sa240\ql\qnatural
\cf0 Note, the minimum size of the L1 table is a function of the size of the represented disk image:\
\pard\pardeftab720\ql\qnatural

\f1 \cf0  l1_size = round_up(disk_size / (cluster_size + l2_size), cluster_size)\
\pard\pardeftab720\sa240\ql\qnatural

\f0 \cf0 \
In other words, in order to map a given disk address to an offset within the image:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls5\ilvl0\cf0 {\listtext	1.	}Obtain the L1 table address using the 
\f1 l1_table_offset
\f0  header field\
{\listtext	2.	}Use the top (64 - 
\f1 l2_bits
\f0  - 
\f1 cluster_bits
\f0 ) bits of the address to index the L1 table as an array of 64 bit entries\
{\listtext	3.	}Obtain the L2 table address using the offset in the L1 table\
{\listtext	4.	}Use the next 
\f1 l2_bits
\f0  of the address to index the L2 table as an array of 64 bit entries\
{\listtext	5.	}Obtain the cluster address using the offset in the L2 table.\
{\listtext	6.	}Use the remaining cluster_bits of the address as an offset within the cluster itself\
\pard\pardeftab720\sa240\ql\qnatural
\cf0 If the offset found in either the L1 or L2 table is zero, that area of the disk is not allocated within the image.\
Note also, that the top two bits of each of the offsets found in the L1 and L2 tables are reserved for "copied" and "compressed" flags. More on that below.\
\pard\pardeftab720\sa280\ql\qnatural

\b\fs36 \cf0 Reference Counting\
\pard\pardeftab720\sa240\ql\qnatural

\b0\fs24 \cf0 Each cluster is reference counted, allowing clusters to be freed if, and only if, they are no longer used by any snapshots.\
\
The 2 byte reference count for each cluster is kept in cluster sized blocks. A table, given by 
\f1 refcount_table_offset
\f0  and occupying 
\f1 refcount_table_clusters
\f0  clusters, gives the offset in the image of each of these refcount blocks.\
In order to obtain the reference count of a given cluster, you split the cluster offset into a refcount table offset and refcount block offset. Since a refcount block is a single cluster of 2 byte entries, the lower 
\f1 cluster_size - 1
\f0  bits is used as the block offset and the rest of the bits are used as the table offset.\
One optimization is that if any cluster pointed to by an L1 or L2 table entry has a refcount exactly equal to one, the most significant bit of the L1/L2 entry is set as a "copied" flag. This indicates that no snapshots are using this cluster and it can be immediately written to without having to make a copy for any snapshots referencing it.\
\pard\pardeftab720\sa280\ql\qnatural

\b\fs36 \cf0 Copy-on-Write Images\
\pard\pardeftab720\sa240\ql\qnatural

\b0\fs24 \cf0 A QCOW image can be used to store the changes to another disk image, without actually affecting the contents of the original image. The image, known as a copy-on-write image, looks like a standalone image to the user but most of its data is obtained from the original image. Only the clusters which differ from the original image are stored in the copy-on-write image file itself.\
The representation is very simple. The copy-on-write image contains the path to the original disk image, and the image header gives the location of the path string within the file.\
When you want to read an cluster from the copy-on-write image, you first check to see if that area is allocated within the copy-on-write image. If not, you read the area from the original disk image.\
\pard\pardeftab720\sa280\ql\qnatural

\b\fs36 \cf0 Snapshots\
\pard\pardeftab720\sa240\ql\qnatural

\b0\fs24 \cf0 Snapshots are a similar notion to the copy-on-write feature, except it is the original image that is writable, not the snapshots.\
To explain further - a copy-on-write image could confusingly be called a "snapshot", since it does indeed represent a snapshot of the original images state. You can make multiple of these "snapshots" of the original image by creating multiple copy-on-write images, each referring to the same original image. What's noteworthy here, though, is that the original image must be considered read-only and it is the copy-on-write snapshots which are writable.\
Snapshots - "real snapshots" - are represented in the original image itself. Each snapshot is a read-only record of the image a past instant. The original image remains writable and as modifications are made to it, a copy of the original data is made for any snapshots referring to it.\
Each snapshot is described by a header:\
\pard\pardeftab720\ql\qnatural

\f1 \cf0   typedef struct QCowSnapshotHeader \{\
      /* header is 8 byte aligned */\
      uint64_t l1_table_offset;\
\
      uint32_t l1_size;\
      uint16_t id_str_size;\
      uint16_t name_size;\
\
      uint32_t date_sec;\
      uint32_t date_nsec;\
\
      uint64_t vm_clock_nsec;\
\
      uint32_t vm_state_size;\
      uint32_t extra_data_size; /* for extension */\
      /* extra data follows */\
      /* id_str follows */\
      /* name follows  */\
  \} QCowSnapshotHeader;\
\pard\pardeftab720\ql\qnatural

\f0 \cf0 Details are as follows\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls6\ilvl0\cf0 {\listtext	\'95	}A snapshot has both a name and ID, represented by strings (not zero-terminated) which follow the header.\
{\listtext	\'95	}A snapshot also has a copy, at least, of the original L1 table given by 
\f1 l1_table_offset
\f0  and 
\f1 l1_size
\f0 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls6\ilvl0
\f1 \cf0 {\listtext	\'95	}date_sec
\f0  and 
\f1 date_nsec
\f0  give the host machine 
\f1 gettimeofday()
\f0  when the snapshot was created.\
{\listtext	\'95	}\
\ls6\ilvl0
\f1 {\listtext	\'95	}vm_clock_nsec
\f0  gives the current state of the VM clock.\
\ls6\ilvl0
\f1 {\listtext	\'95	}vm_state_size
\f0  gives the size of the virtual machine state which was saved as part of this snapshot. The state is saved to the location of the original L1 table, directly after the image header.\
\ls6\ilvl0
\f1 {\listtext	\'95	}extra_data_size
\f0  species the number of bytes of data which follow the header, before the id and name strings. This is provided for future expansion.\
\pard\pardeftab720\sa240\ql\qnatural
\cf0 A snapshot is created by adding one of these headers, making a copy of the L1 table and incrementing the reference counts of all L2 tables and data clusters referenced by the L1 table. Later, if any L2 table or data clusters of the underlying image are to be modified - i.e. if the reference count of the cluster is greater than 1 and/or the "copied" flag is set for that cluster - they will first be copied and then written to. That way, all snapshots remains unmodified.\
\pard\pardeftab720\sa280\ql\qnatural

\b\fs36 \cf0 Compression\
\pard\pardeftab720\sa240\ql\qnatural

\b0\fs24 \cf0 The QCOW format supports compression by allowing each cluster to be independently compressed with zlib.\
This is represented in the cluster offset obtained from the L2 table as follows:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls7\ilvl0\cf0 {\listtext	\'95	}If the second most significant bit of the cluster offset is 1, this is a compressed cluster\
{\listtext	\'95	}The next 
\f1 cluster_bits - 8
\f0 of the cluster offset is the size of the compressed cluster, in 512 byte sectors\
{\listtext	\'95	}The remaining bits of the cluster offset is the actual address of the compressed cluster within the image\
\pard\pardeftab720\sa280\ql\qnatural

\b\fs36 \cf0 Encryption\
\pard\pardeftab720\sa240\ql\qnatural

\b0\fs24 \cf0 The QCOW format also supports the encryption of clusters.\
If the crypt_method header field is 1, then a 16 character password is used as the 128 bit AES key.\
Each sector within each cluster is independently encrypted using AES Cipher Block Chaining mode, using the sector's offset (relative to the start of the device) in little-endian format as the first 64 bits of the 128 bit initialisation vector.\
\pard\pardeftab720\sa280\ql\qnatural

\b\fs36 \cf0 The QCOW Format\
\pard\pardeftab720\sa240\ql\qnatural

\b0\fs24 \cf0 Version 2 of the QCOW format differs from the original version in the following ways:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls8\ilvl0\cf0 {\listtext	1.	}It supports the concepts of snapshots; version 1 only had the concept of copy-on-write image\
{\listtext	2.	}Clusters are reference counted in version 2; reference counting was added to support snapshots\
{\listtext	3.	}L2 tables always occupy a single cluster in version 2; previously their size was given by a 
\f1 l2_bits
\f0  header field\
{\listtext	4.	}The size of compressed clusters is now given in sectors instead of bytes\
\pard\pardeftab720\sa240\ql\qnatural
\cf0 A previous version of this document which described version 1 only is available {\field{\*\fldinst{HYPERLINK "file:///Users/mressl/Documents/OpenEmulator/openemulator/doc/qcow-image-format-version-1.html"}}{\fldrslt \cf2 \ul \ulc2 here}}.\
\pard\pardeftab720\sa240\ql\qnatural
{\field{\*\fldinst{HYPERLINK "http://blogs.gnome.org/markmc"}}{\fldrslt 
\fs20 \cf2 \ul \ulc2 Mark McLoughlin}}
\fs20 . Sep 11, 2008.
\fs24 \
}