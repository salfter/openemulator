{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 =Device Markup Language 1.0=\
DML (Device Markup Language) is a language for describing emulation components and their interconnections, as well as for storing the component's state.\
\
This document describes the version 1.0 of this specification.\
\
==Definitions==\
* Quotes are used in this document to indicate the start and end of a string.\
* The resources folder is a folder containing emulation resources, and is usually divided in the following hierarchy:\
** roms - Stores ROM images\
** images - Stores emulation images\
** sounds - Stores emulation sounds\
\
==DML Format==\
DML files can be stored stand-alone (for storing device descriptions), or packaged (for storing both device description and state).\
\
The packaged format consists of a folder with the ".emulation" extension, and an "info.xml" inside, that contains the DML file.\
\
The packaged format may also consist of a file with the ".emulation" extension, and an info.xml file stored inside, in ZIP format. There should not be any sub-folders in the ZIP file.\
\
==DML Tags==\
\
==="dml"===\
The DML language is based on XML. The main XML element must be a "dml" element, with the following tags:\
\
* version: Should be "1.0"\
* label: The name of this emulation (for UI purposes)\
* image: A path to an image for this emulation (relative to the "resources" folder)\
* description: A description of this emulation\
* group: A name used for grouping this emulation in the template selector. For example: "Apple I", "PC", etc.\
\
The "dml" element may contain only "device" elements.\
\
==="device"===\
Each "device" element corresponds to a distinct physical device in the emulation (e.g. a computer, a printer, an external disk drive, an external keyboard).\
\
The "device" element has the following tags:\
\
* name: The device address of this device. Usually of the form: "dev[x]", [x] being a positive integer\
* label: The name of this device (for UI purposes)\
* image: A path to an image for this device (relative to the "resources" folder)\
\
The "device" element can contain "inlet", "outlet", "setting" or "component" elements.\
\
==="inlet"===\
An "inlet" element defines an inlet for connecting other devices to this device.\
\
It has the following tags:\
\
* ref: The address of the property that holds the address of the component used to communicate with the other device\
* type: A name that must match the corresponding outlet. For example: "CompositeVideo"\
* category: One of the following: "expansion" (for connectors that are physically inside the main emulated computer), "peripheral" (for connectors that are physically outside of the main emulated computer), "storage" (for peripherals that provide persistent data storage, e.g. disk drives)\
* label: The name of this inlet (for UI purposes). For example: "Video Connector", "Slot 2"\
* image: A path to an image for this inlet (relative to the "resources" folder)\
\
==="outlet"===\
An "outlet" element defines an outlet for connecting this device to another device.\
\
It has the following tags:\
\
* ref: The address of the component used to communicate with this device\
* type: A name that must match the corresponding inlet. For example: "CompositeVideo"\
* label: The name of this outlet (for UI purposes). For example: "Video Jack", "Port 1". Not required.\
* image: A path to an image for this outlet (relative to the "resources" folder). Not required.\
\
==="setting"===\
A "setting" element defines a property that can be configured through the host user interface. It has the following tags:\
\
* ref: The property address to be set with this setting\
* type: One of the following: "checkbox" for properties that can be set ("1") or unset("0"), "option" for properties that are one of many, and "slider" for properties that can have a numeric value within a range.\
* options: If the setting is of type "option", a comma-separated list of possible values (e.g. "None, Even, Odd"). If the setting is of type "slider", a comma-separated list of minimum, step, maximum value. E.g. ("0.0, 0.01, 1.0" for a volume control). This tag is not used for checkbox settings.\
* label: The name of this setting (for UI purposes).\
\
==="component"===\
A "component" element defines a component. It has the following tags:\
\
* name: The component address of the component\
* class: The class of the component. This should match the name of the C++ class to be instantiated\
\
A "component" element may contain "property", "data", "resource" or "connection" elements.\
\
==="property"===\
A "property" element defines a property which is set (through the OEComponent.setProperty call) when the emulation is instantiated, and get (through the OEComponent.getProperty call) when the emulation is about to be terminated. If the getProperty call returns false, the property is not modified.\
\
I has the following tags:\
* name: The name of the property\
* value: The value of the property\
\
==="data"===\
A "data" element defines an array of binary user data which is set (through the OEComponent.setData call) when the emulation is instantiated, and get (through the OEComponent.getData call) when the emulation is about to be terminated. If the getData call returns false, no data is written.\
\
I has the following tags:\
* name: The name of the data\
* src: A filename in the emulation package. The special symbol "$\{REF\}" in the filename is replaced with the components address, in order to guarantee unique names.\
\
==="resource"===\
A "resource" element defines an array of binary resource data which is set (through the OEComponent.setResource call) when the emulation is instantiated.\
\
I has the following tags:\
* name: The name of the resource\
* src: A filename in the resource folder.\
\
==DML Addresses==\
The "ref" tags in the DML description refer to other devices, components or properties. This address is constructed as follows:\
\
[device::][component][.property]\
\
It is possible to construct partial addresses, by omitting the "device::" or "component" part.\
\
==Special considerations==\
\
\
}